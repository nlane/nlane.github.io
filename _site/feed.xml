<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-01-13T15:13:34-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Natalie’s Little Theorems</title><subtitle>A tech blog with a math twist!</subtitle><entry><title type="html">5 Life Lessons from Programming to Take into 2019</title><link href="http://localhost:4000/2019/01/13/lifelessonsfromprogramming.html" rel="alternate" type="text/html" title="5 Life Lessons from Programming to Take into 2019" /><published>2019-01-13T00:00:00-05:00</published><updated>2019-01-13T00:00:00-05:00</updated><id>http://localhost:4000/2019/01/13/lifelessonsfromprogramming</id><content type="html" xml:base="http://localhost:4000/2019/01/13/lifelessonsfromprogramming.html">&lt;h1&gt;5 Life Lessons from Programming to Take into 2019&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;post-meta&quot;&gt;Posted: Jan 13, 2019&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;i&gt;With new year's resolutions in mind, I am going to apply 5 programming principles to my life in order to live a better 2019.&lt;/i&gt;&lt;/h3&gt;

&lt;p&gt;Proof:
In the spirit of the new year, I feel the drive to make some goals and work on living a better 2019. Nowadays, I feel as if “new year’s resolutions” have taken on a bad reputation. It is assumed that as January turns to February and we get bogged down with day-to-day life that the goals drift away from us. To be candid, my goal last year was to read a book a month. I was bored by my February book and never finished it, but felt too guilty to immediately switch to another. I think I only read about 4 books last year (yikes!). Will 2019 be any different? I sure hope so, but I think it will work only if I make my goals a part of my lifestyle rather than thinking about them as “new year’s resolutions”.&lt;/p&gt;

&lt;p&gt;My post today is along the same vein: 5 life principles I’ve learned from programming to take into 2019. These are not concrete goals that you can measure and track (sorry years of public school teaching me about “SMART” goals…). In fact, I wouldn’t call these goals at all, they are simply principles to try to apply to your life in any way you can. In my experience these types of goals are more achievable as you apply them to the current activities of your daily life instead of adding on an extra chore to do. Hopefully I’ll be able to hold onto these resolutions longer than February this year!&lt;/p&gt;

&lt;p&gt;Principle 1: Don’t Repeat Yourself&lt;/p&gt;

&lt;p&gt;The Don’t Repeat Yourself (DRY) principle is arguably one of the most cited principles in programming. It’s quite self-explanatory, but in terms of coding means that you shouldn’t write out similar code or logic more that once. By wrapping this code into something that can be reused you save time creating this logic only once, you only have one place to go to make changes, and your code is much easier to read and understand.&lt;/p&gt;

&lt;p&gt;There are a lot of ways to apply this principle to your life: (1) if you find yourself having to repeat stories or details to friends who are not listening, maybe you should work on building better friendships. (2) Perhaps at work if you have to explain and re-explain your thoughts constantly, make an effort to state things clearly and concisely the first time so that people get it. (3) Instead of simply talking about your goals, go and work on them. (4) Don’t make others repeat themselves, try to be an engaged listener. Maybe you have some other interpretations of DRY, that’s fine too! The point here is, no one likes repeating themselves, so if you find that you are doing this (either by words or actions), you should take a closer look at what’s going on.&lt;/p&gt;

&lt;p&gt;Principle 2: No Premature Optimization&lt;/p&gt;

&lt;p&gt;In programming, and in many other fields, we tend to strive to come up with the best answer first. Why waste your time building something sub-optimal when you can take some extra time now to come up with the final solution? Well this sounds great at first, but rarely is a problem so understandable that this is possible. While building a solution you learn new things about the problem that change your understanding making those premature optimizations obsolete. Therefore it is faster to try to solve the problem first then optimize later once you fully understand the problem and solution.&lt;/p&gt;

&lt;p&gt;So if you have a new year’s resolution to exercise more, don’t come up with an arbitrary gym schedule that you think fits best into your life. Start working out various days and times of the week to experiment and find what is most sustainable in your lifestyle. While it seems optimal to go to the gym in the mornings before work or school, if you’re not a morning person this just isn’t going to work (I know, I’ve tried!).&lt;/p&gt;

&lt;p&gt;If you try to optimize your goals now, you risk implementing them incorrectly. This kills motivation and is probably why most new year’s resolutions fail. Take your time to find different “solutions” or ways of achieving your goals. You will find what works as your optimal solution and will have much better chances of success.&lt;/p&gt;

&lt;p&gt;Principle 3: Single Responsibility&lt;/p&gt;

&lt;p&gt;In technology, you can divide your code up into functions, modules, classes, etc. This provides for a nice design of a program which is easier to create, maintain, and understand. To implement this well, it’s recommended to follow the single responsibility principle. That is, to allow each part of the code to do it’s one job and nothing more.&lt;/p&gt;

&lt;p&gt;I find that this can really relate to your work-family-home life balance. You play certain roles in these different aspects of life, yet sometimes feel that you must play them all at once. For example, if I am the one in my family who tends to mediate conflicts, I may feel like this is the role I ought to take on at work as well. Of course that’s not true at all! Would you wash the dishes in the kitchen sink of your office when you didn’t use any simply because you tend to wash dishes at home? I hope not…&lt;/p&gt;

&lt;p&gt;I’ve observed that women especially may feel the need to be the caretakers of an office because they often provide emotional support at home. This can lead to major burnout which is why it’s better to partition your roles evenly into your aspects of life. Of course, if it’s part of your core personality to be the caretaker, planner, mediator, or whatever role you play then it’s fine to take this into all parts of your life. I’m saying that if you find yourself performing duties from one part of your life in another just because you feel like you have to, you should stop!&lt;/p&gt;

&lt;p&gt;Principle 4: Learn From Others&lt;/p&gt;

&lt;p&gt;Don’t reinvent the wheel! When you are coding there are many languages and libraries which have functionalities built into them that are meant to be used and reused by programmers. Common tasks shouldn’t be re-implemented (remember DRY?), programmers should take them and build upon it. Similarly, the first step to solving any problem in coding is to search the web for it. Chances are, someone else had that problem and has some solution that can help!&lt;/p&gt;

&lt;p&gt;While at surface-level this seems to be a cheesy principle, I think its value cannot be understated. Learn from others. Maybe you have friends you can go to for advice, or maybe you can simply turn to the internet or a support group to talk about your problems. Join a club, play a new team sport, make a new friend, go to an improv class, whatever you do will open you up to others. You’ll probably be surprised by how much you learn from these experiences.&lt;/p&gt;

&lt;p&gt;Principle 5: Refactor!&lt;/p&gt;

&lt;p&gt;Purposefully placed last is the everlasting lesson of refactoring. It’s assumed that your code is not going to be perfect the first time, so you ought to go back and fix the structure of it. You don’t need to change the functionalities and behavior of your code, just the design of it.&lt;/p&gt;

&lt;p&gt;Same thing applies to you. This is dangerously close to the phrase “never settle for who you are”, which is an unhealthy motto to live by if you don’t have a good sense of self-worth. But assuming that you are comfortable and confident with who you are, you ought to have a drive for improvement. The key behind refactoring though, is you are not changing who you are as the qualities of you stay the same. You’re simply becoming a better version of you!&lt;/p&gt;

&lt;p&gt;If it’s possible, I think I’ve managed to make this principle more corny than the last… In any case, you know what I mean!&lt;/p&gt;

&lt;p&gt;Whether you’re in technology or not, I hope these principles hit home for you. I wish you all luck with your new year’s resolutions, goals, principles, or whatever you have set for yourself in 2019! QED.&lt;/p&gt;</content><author><name></name></author><summary type="html">5 Life Lessons from Programming to Take into 2019 Posted: Jan 13, 2019 With new year's resolutions in mind, I am going to apply 5 programming principles to my life in order to live a better 2019.</summary></entry><entry><title type="html">CS Education Week</title><link href="http://localhost:4000/2018/12/09/csedweek.html" rel="alternate" type="text/html" title="CS Education Week" /><published>2018-12-09T00:00:00-05:00</published><updated>2018-12-09T00:00:00-05:00</updated><id>http://localhost:4000/2018/12/09/csedweek</id><content type="html" xml:base="http://localhost:4000/2018/12/09/csedweek.html">&lt;h1&gt;CS Education Week&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;post-meta&quot;&gt;Posted: Dec 09, 2018&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;i&gt;There are plenty of ways year round to participate in CS education.&lt;/i&gt;&lt;/h3&gt;

&lt;p&gt;Proof:&lt;/p&gt;

&lt;p&gt;I was taking a Lyft last week when the driver began making small talk about my career. After telling him I was in technology he got quite excited and began asking me about ways to learn programming. I realized that many people may have the same problem as him. They may think that the only ways to learn programming are by getting a degree in computer science or spending hundreds of dollars on a bootcamp. There are, however, plenty of free resources available to help you get started.&lt;/p&gt;

&lt;p&gt;In fact, today marks the last day of &lt;a target=&quot;_blank&quot; href=&quot;https://csedweek.org/&quot;&gt;Computer Science Education Week&lt;/a&gt;, an annual program to promote K-12 computer science education. It coincides with Admiral Grace Hopper’s birthday which falls on December 9th (today!). So in the spirit of CS Education Week, here is a gathering of educational resources for learning computer science and coding.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;For the Beginner and/or Younger Student:&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;While you may not have dreams of becoming an engineer in Silicon Valley, learning even some coding basics can help you in a variety of ways. Want to create a personal website (or blog!)? Could coding help automate tasks you do manually at work? Are you a teacher who wants to introduce a simple coding assignment into your curriculum? Maybe you just want to understand the technology that you use every day a little better? No matter what the reason, there are plenty of ways to start learning today.&lt;/p&gt;

&lt;p&gt;CS Education Week promotes modules called “Hour of Code”. You will find a full list of the activities &lt;a href=&quot;https://hourofcode.com/us/learn&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;, but these are a few of my favorites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://hourofcode.com/codehsmusic&quot;&gt;Music&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://hourofcode.com/frzn&quot;&gt;Frozen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;https://hourofcode.com/star-wars&quot;&gt;Star Wars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;	https://hourofcode.com/groklearningpython&quot;&gt;Biology&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;i&gt;For the Serious Student or Professional:&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;There are some Hour of Code activities that teach more advanced topics. Let’s say you already know how to make a website. Basic HTML courses are of no use to you, but maybe you are not familiar with &lt;a href=&quot;https://hourofcode.com/htmltimetravel&quot; target=&quot;_blank&quot;&gt;CSS animations&lt;/a&gt;? Or you are a Python expert looking to learn a little bit of &lt;a href=&quot;https://hourofcode.com/codehsjava&quot; target=&quot;_blank&quot;&gt;Java&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While those are hour long modules, plenty of longer online courses are available as well. Khan academy has a section for &lt;a href=&quot;https://www.khanacademy.org/computing/computer-programming&quot; target=&quot;_blank&quot;&gt;computer programming&lt;/a&gt; which includes basic HTML, CSS, Javascript, SQL, and advanced topics such as natural simulations. A personal favorite of mine is &lt;a href=&quot;https://www.codecademy.com/catalog/subject/all&quot; target=&quot;_blank&quot;&gt;Codecademy&lt;/a&gt; which offers many free courses outside of their paid subscription plan including the basics on almost all the big programming languages and more specialized skills such as Blockchain, ReactJS, Git, and the Watson API.&lt;/p&gt;

&lt;p&gt;If you are looking for college-level courses to explore, there is a large offering of open computer science courses via &lt;a href=&quot;https://ocw.mit.edu/courses/find-by-topic/#cat=engineering&amp;amp;subcat=computerscience&quot; target=&quot;_blank&quot;&gt;MIT Open Courseware&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alternatively, if you want to hone your skills instead of learning new ones you can start by doing practice problems on one of these sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hackerrank.com/&quot; target=&quot;_blank&quot;&gt;HackerRank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leetcode.com/&quot; target=&quot;_blank&quot;&gt;LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Or in the spirit of the holidays... &lt;a href=&quot;https://adventofcode.com/&quot; target=&quot;_blank&quot;&gt;Advent of Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you choose to learn about computer science, great! If not, that’s fine too! All that matters is that we continue to promote CS education so all are given the opportunity to learn. QED.&lt;/p&gt;</content><author><name></name></author><summary type="html">CS Education Week Posted: Dec 09, 2018 There are plenty of ways year round to participate in CS education.</summary></entry><entry><title type="html">Paying for Software</title><link href="http://localhost:4000/2018/11/18/payingforsoftware.html" rel="alternate" type="text/html" title="Paying for Software" /><published>2018-11-18T00:00:00-05:00</published><updated>2018-11-18T00:00:00-05:00</updated><id>http://localhost:4000/2018/11/18/payingforsoftware</id><content type="html" xml:base="http://localhost:4000/2018/11/18/payingforsoftware.html">&lt;h1&gt;Paying for Software&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;post-meta&quot;&gt;Posted: Nov 18, 2018&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;i&gt;We need to start thinking about how we value software in order to drive the industry towards higher quality products.&lt;/i&gt;&lt;/h3&gt;

&lt;p&gt;Proof:&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Double Standard&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;I recently was browsing the app store on my phone and reading some reviews on a few apps before hitting that “download” button. Scrolling through, I read one review from an individual that enjoyed the game but felt it was ruined by the “greedy developers” who put too many ads within the game. Now I too get annoyed as being bombarded with ads does damper the user experience. Have you ever gone to a news site to read an article but you can hardly see the text because most of the screen is covered in ads? Sometime even a video pops up OVER the text. Those websites are almost impossible to use!&lt;/p&gt;

&lt;p&gt;Here’s the thing that gave me pause though when I read that review. How expensive was the phone the person downloaded and reviewed the game on? Now, I’ll admit that there is a market for phones under $500, but most smartphones these days cost much more. How many times have you heard someone joke that the X in iPhone X stands for expensive? I’ve heard it at least X times.&lt;/p&gt;

&lt;p&gt;Let’s say you do dish out the $1,000 to get the new iPhone. If you want to use your traditional style headphones with it, you have to shake the piggy bank for an extra $9 to get the headphone jack adapter. Why isn’t that just included in the price for the phone? Take a second to imagine the outrage that would occur if Apple didn’t include the messages app with their phone. If you had to pay $3 to download it, I’m sure criticism would escalate beyond the review section of the app store. I find it really hard to believe, however, that Apple puts more money into that adapter than they do into the messages app.&lt;/p&gt;

&lt;div class=&quot;comic-contain&quot;&gt;
&lt;br /&gt;&lt;img style=&quot;width:400px;height:400px&quot; src=&quot;https://imgs.xkcd.com/comics/xkcd_phone_4.png&quot; /&gt;
&lt;figcaption&gt;&lt;i&gt;via xkcd&lt;/i&gt;&lt;/figcaption&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We have a double standard when it comes to software and hardware - and it makes sense. Sure I’ll dish out extra cash for the device which I can see and hold. Of course it costs so much with all the chips and circuits inside. That app on my phone? That news website? There are so many of those it can’t be that hard to make. Why should I pay for an application when there is almost always a free alternative?&lt;/p&gt;

&lt;p&gt;I went to an art school growing up so I’ve always valued art in all its forms. While I haven’t personally paid hundreds of dollars for an original painting by a “starving artist”, I am careful to credit photos, pay for music, and dish out extra cash to rent a movie instead of illegally downloading it online. I consume art and want it to continue to be available at a quality level. Yes Beyoncé, take my $20 so you can make me another album as iconic as Lemonade. Software is similar in that we are so used to it, we’ve become desensitized to its value. Most of us will agree that if someone took the time to make it, and there are people consuming it, then it should be worth something.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Nothing in Life Comes Free&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;There’s one key difference between art and software though. Art can be made once and put out into the universe where it lives on for years. Software degrades at the speed of which technology updates, forcing developers to fix the breaks as they come more and more rapidly. If we are looking at software that makes money by charging its users (not through ads or other means), the next question is if a one-time fee covers the cost of the maintenance it takes to keep the software alive and relevant?&lt;/p&gt;

&lt;p&gt;Photoshop used to be a one time payment. In fact, way back in the day, you would have to go to the store and buy a CD set for your computer. If you wanted the next version you would go out to the store and buy the next CD set. Today Adobe offers their products as part of a “Creative Cloud” which you can pay for either monthly or annually as a subscription. The software comes as a download rather than a CD which makes it simpler to pull updates as they occur. Adobe needs to keep up with changing technology both on the photography/graphic side as well as the personal computer side. As 3D printing grew more popular, Photoshop began to support 3D modeling. When Apple released laptops with touch bars, Adobe had to integrate this new interface into their products as well.&lt;/p&gt;

&lt;p&gt;What about products that are free? They say if you’re not paying for the product, then you are the product. We know that many big tech companies (Google, Facebook, Amazon, etc) are selling your data or selling the fact that they have your data and can target ads to you. Rarely will you find free software that comes without any stipulations. That’s because it takes time to design, develop, and maintain quality software.&lt;/p&gt;

&lt;p&gt;As technology becomes a bigger and bigger part of our daily lives, we have to consider how we want to pay for the software we use. Are we okay with using free products that collect our data in the background for targeting ads? Would we rather pay to get the software that promises data privacy and doesn’t shove ads in your face? And is it worth it to keep paying for newer versions of that software? Or would we rather have a bunch of subscriptions for all our software which covers future updates? Obviously it will have to depend on the applications you are looking to invest in. If you’re a graphic artist, then yes the subscription to Photoshop is worth it. If you are looking to download a to-do list on your phone, you would be crazy to spend more than a couple dollars. Whatever you choose is fine, just make sure you are considering your options and not discounting the value of software simply because there is so much of it out there that appears free. If we treat software with the respect it deserves, the industry will continue to push towards high quality applications. Otherwise, we risk running into an age where the market is dominated by products that are poor quality or are making their money in questionable ways. QED.&lt;/p&gt;</content><author><name></name></author><summary type="html">Paying for Software Posted: Nov 18, 2018 We need to start thinking about how we value software in order to drive the industry towards higher quality products.</summary></entry><entry><title type="html">Imposter Syndrome</title><link href="http://localhost:4000/2018/11/08/impostersyndrome.html" rel="alternate" type="text/html" title="Imposter Syndrome" /><published>2018-11-08T00:00:00-05:00</published><updated>2018-11-08T00:00:00-05:00</updated><id>http://localhost:4000/2018/11/08/impostersyndrome</id><content type="html" xml:base="http://localhost:4000/2018/11/08/impostersyndrome.html">&lt;h1&gt;Imposter Syndrome&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;post-meta&quot;&gt;Posted: Nov 08, 2018&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;i&gt;Imposter syndrome is normal, especially in technology. But you can overcome it!&lt;/i&gt;&lt;/h3&gt;

&lt;p&gt;Proof:
Each night before you go to bed write down three things you did well that day. Try it for a month. Try it for a week. I don’t care - just try it. Admittedly, I do not do this daily. Someone gave me this advice years ago and I find myself going through phases with this exercise. It helps me most when I’m having low self-esteem and need a boost of confidence. In other words, it helps me when I feel like my imposter syndrome is returning.&lt;/p&gt;

&lt;p&gt;A popular term these days, imposter syndrome is a feeling of inadequacy despite evidence of success. You fear being exposed as an “imposter” as you attribute your accomplishments to luck. It is very common and not unique to being in the field of technology. That being said, I believe that being in the field of technology can make these feelings more prominent and longer term.&lt;/p&gt;

&lt;div class=&quot;comic-contain&quot;&gt;
&lt;br /&gt;&lt;img src=&quot;https://imgs.xkcd.com/comics/impostor_syndrome.png&quot; /&gt;
&lt;figcaption&gt;&lt;i&gt;via xkcd&lt;/i&gt;&lt;/figcaption&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you ask any software developer, they will tell you that a good portion of their day is spent looking at online resources. It’s not because they are bad at their jobs, it’s because technology is constantly evolving and no one can keep up. Most developers use multiple languages and libraries throughout their career. Even if you tend to use the same tools, updates within those tools force you to relearn them as you go. This is why half of a developers time could be spent learning and problem solving rather than actively writing code.&lt;/p&gt;

&lt;p&gt;The truth is that if you’re comfortable then you’re likely falling behind. You need to push yourself to learn new technologies in order to keep up, and you need to push even further if you want to get ahead. This is absolutely daunting. This perception of feeling behind can easily foster a sense of incompetency as you are aware of this whole world of knowledge you don’t have. Even as you keep chasing it by learning new things, that finish line keeps moving further and further away. Sure I had success yesterday, but is that relevant today? Of course it is, but you don’t always embody that truth.&lt;/p&gt;

&lt;p&gt;So write it down. Note your accomplishments and feel good that you were able to learn something new. Even if the particular skill is obsolete tomorrow, you likely got much more out of the learning experience than just that skill. Learn to get comfortable with being uncomfortable, and do not be afraid to talk about your self-doubts. There wouldn’t be a Wikipedia page talking about “imposter syndrome” if it was not a real and common phenomenon. QED.&lt;/p&gt;</content><author><name></name></author><summary type="html">Imposter Syndrome Posted: Nov 08, 2018 Imposter syndrome is normal, especially in technology. But you can overcome it!</summary></entry><entry><title type="html">Technology and Education</title><link href="http://localhost:4000/2018/10/27/techeducation.html" rel="alternate" type="text/html" title="Technology and Education" /><published>2018-10-27T00:00:00-04:00</published><updated>2018-10-27T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/27/techeducation</id><content type="html" xml:base="http://localhost:4000/2018/10/27/techeducation.html">&lt;h1&gt;Technology and Education&lt;/h1&gt;
&lt;p&gt;&lt;span class=&quot;post-meta&quot;&gt;Posted: Oct 30, 2018&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;&lt;i&gt;A greater focus on computer science in K-12 schools will lead to increased diversity in technology&lt;/i&gt;&lt;/h3&gt;

&lt;p&gt;Proof:
I still clearly remember my first day of computer science in college. I had not programmed prior to this class, however I entered with a cautious optimism as I knew I tended to do well with math and logic. But then the class began.&lt;/p&gt;

&lt;p&gt;My peers started raising their hands confidently asking about if we would be using Java or Python. After class they told stories of how they coded their calculators in middle school math because they were bored. I realized that I had falsely assumed that most of the students in this &lt;i&gt;introductory&lt;/i&gt; class would be beginners like me. I felt such envy that they were able to take AP computer science in high school. If only I had been given that chance, maybe I would not have to work twice as hard just to catch up? Only after a few weeks in the course, I found myself wanting to give up. But as the saying goes, my mama did not raise a quitter. So I fought through it and found out, once I got over the learning curve, that I was pretty good at computer science.&lt;/p&gt;

&lt;p&gt;Fast forward to today, and I am still thinking about the series of events in ones life that may lead them to sit down in a computer science college class, try an online coding course, or sign up for one of the many bootcamps offered these days. While it is quite obvious that the computer science field is composed of mostly white males, it is less obvious how we can change that. I believe that programming will remain a niche field only pursued by a mostly privileged group of students and professionals until we integrate computer science into the K-12 curriculum.&lt;/p&gt;

&lt;p&gt;By exposing younger children to programming you can prevent them from inheriting the negative stigmas often associated with computer science. When television shows and movies portray tech clubs or hackers they tend to paint an unattractive picture of “geeky” people (mostly men) with an unhealthy obsession for technology. Why not show children that computers and technology are for everyone? Allow their interest to develop before they build unhealthy and untrue biases. I think this point is especially relevant for solving the gender gap, but it’s best that I save my thoughts on that for another post.&lt;/p&gt;

&lt;p&gt;Another interesting point is that some students may not have the resources to explore technology on their own. It is wrong to assume that every child is growing up with technology at their fingertips these days. &lt;a class=&quot;link-inside-post&quot; href=&quot;http://www.pewresearch.org/fact-tank/2018/10/26/nearly-one-in-five-teens-cant-always-finish-their-homework-because-of-the-digital-divide/&quot;&gt;A recent study&lt;/a&gt;  by Pew Research showed that 25% of lower-income teenagers do not have access to a computer at home. If public schools fail to offer computer science classes, these students without computers have little to no chance of stumbling into the field on their own. The great thing about computer science is that you don’t need a computer to learn the foundational concepts. So even for schools that cannot afford laptops and for students who cannot afford an at-home computer, valuable computer science and algorithmic concepts can still be taught and practiced.&lt;/p&gt;

&lt;p&gt;About one year ago, Delaware’s Governor John Carney signed &lt;a class=&quot;link-inside-post&quot; href=&quot;http://legis.delaware.gov/BillDetail?LegislationId=25346&quot;&gt;a bill&lt;/a&gt; which requires public high schools in the state to offer at least one computer science course by the 2020 school year. While we may be years away from conducting real studies which can confirm the long-term effects of bills such as this one, we can enjoy observing the start of it.&lt;/p&gt;

&lt;p&gt;I know that adding a computer science class to public schools is not the complete solution, but it is a step in the right direction. The diversity problem in technology is not going to fix itself, and now is the time to start making changes. You hear everywhere that “technology is the future”. If this is true, then isn’t it better to let everyone have the opportunity to build our tomorrow? QED.&lt;/p&gt;</content><author><name></name></author><summary type="html">Technology and Education Posted: Oct 30, 2018 A greater focus on computer science in K-12 schools will lead to increased diversity in technology</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/2018/10/26/firstpost.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-10-26T00:00:00-04:00</published><updated>2018-10-26T00:00:00-04:00</updated><id>http://localhost:4000/2018/10/26/firstpost</id><content type="html" xml:base="http://localhost:4000/2018/10/26/firstpost.html">&lt;h1 id=&quot;welcome&quot;&gt;Welcome&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Hello world&lt;/strong&gt;, this is my first Jekyll blog post.&lt;/p&gt;

&lt;p&gt;I hope you like it!&lt;/p&gt;</content><author><name></name></author><summary type="html">Welcome</summary></entry></feed>